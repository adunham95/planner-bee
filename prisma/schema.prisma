// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../src/models/interfaces.d.ts"
  prettier = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id
  email         String    @unique
  password_hash String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  firstName     String?
  lastName      String?
  sessions      Session[]
  orders        Order[]
  events        Event[]
  eCards        ECard[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EventTheme {
  id          String              @id @default(uuid())
  name        String
  description String
  imageURL    String
  sku         String              @unique
  cost        Int?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  options     EventThemeOptions[]
  eCardSku    String?
  invitation  ECardTemplate?      @relation(fields: [eCardSku], references: [sku])
  events      Event[]

  @@index([sku])
}

model EventThemeOptions {
  id           String     @id @default(uuid())
  key          String?    @default(uuid())
  label        String?    @default("")
  editable     Boolean?   @default(false)
  default      String?    @default("")
  options      String?    @default("")
  customStyles String?    @default("")
  displayOrder Int        @default(0)
  componentID  String
  eventThemeID String
  eventTheme   EventTheme @relation(fields: [eventThemeID], references: [id])

  @@index([key])
}

model ECardTemplate {
  id          String           @id @default(uuid())
  sku         String           @unique
  name        String
  description String
  cost        Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  components  ECardComponent[]
  imageURL    String?
  eventTheme  EventTheme[]
  visible     Boolean          @default(true)
  invitation  Event[]
  eCards      ECard[]

  @@index([sku])
}

model ECardComponent {
  id               String        @id @default(uuid())
  key              String?       @default(uuid())
  ecardComponentID String
  ecardID          String
  ecard            ECardTemplate @relation(references: [id], fields: [ecardID])
  label            String?       @default("")
  editable         Boolean?      @default(false)
  default          String?       @default("")
  customStyles     String?       @default("")
  options          String?       @default("")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt

  @@index([key])
}

model Order {
  id            String   @id @default(uuid())
  orderNumber   String?  @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String?  @default("draft")
  event         Event[]
  eCard         ECard[]
  orderOptions OptionItem[]
  customerName  String?  @default("")
  customerEmail String?  @default("")
  customerID    String?
  customer      User?    @relation(references: [id], fields: [customerID])

  @@index([orderNumber, customerID])
}

model Event {
  id               String         @id @default(uuid())
  orderID          String
  order            Order          @relation(references: [id], fields: [orderID])
  senderEmail      String?        @default("")
  senderID         String?
  sender           User?          @relation(references: [id], fields: [senderID])
  eventNumber      String?        @default("")
  eventDate        DateTime?
  eventTemplateSku String
  eventTemplate    EventTheme?    @relation(references: [sku], fields: [eventTemplateSku])
  invitationSku    String?
  invitation       ECardTemplate? @relation(references: [sku], fields: [invitationSku])
  addOns           String[]
  recipients       Recipient[]
  options          OptionItem[]

  @@index([orderID, senderID, eventNumber])
}

model ECard {
  id               String        @id @default(uuid())
  orderID          String
  order            Order         @relation(references: [id], fields: [orderID])
  senderEmail      String?       @default("")
  senderID         String?
  sender           User?         @relation(references: [id], fields: [senderID])
  deliveryDate     DateTime?
  eCardNumber      String?       @default("")
  eCardTemplateSku String
  eCardTemplate    ECardTemplate @relation(references: [sku], fields: [eCardTemplateSku])
  addOns           String[]
  recipients       Recipient[]
  options          OptionItem[]

  @@index([orderID, senderID, eCardNumber])
}

model OptionItem {
  id        String   @id @default(uuid())
  eCardId   String?
  eCard     ECard?   @relation(references: [id], fields: [eCardId])
  eventId   String?
  event     Event?   @relation(references: [id], fields: [eventId])
  orderID String?
  order Order? @relation(references: [id], fields: [orderID])
  value     String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eCardId, eventId])
}

model Recipient {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String?
  email      String?
  phone      String?
  eventID    String?
  event      Event?  @relation(references: [id], fields: [eventID])
  eCardID    String?
  eCard      ECard?  @relation(references: [id], fields: [eCardID])
  rsvpStatus String?
}

model NewsletterSignUp {
  id        String   @id @default(uuid())
  email     String?
  createdAt DateTime @default(now())
}
